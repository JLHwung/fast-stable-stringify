var Benchmark = require('benchmark');

function getLibName(el) {
	return el.name + '@' + el.version;
}

/**
 * @typedef {Object} GroupedJSONBenchmarkObject
 * @prop {string} browser
 * @prop {string} os
 * @prop {JSONBenchmarkObject[]} dataSets
 */

function isValid(json) {
	return json.stats.mean > 0;
}

function sortFastest(jsonA, jsonB) {
	if (!isValid(jsonA) || jsonA.stats.mean + jsonA.stats.moe > jsonB.stats.mean + jsonB.stats.moe && isValid(jsonB)) {
		// jsonB must win
		return 1;
	} else {
		// all other cases: jsonA must win
		return -1;
	}
}

/**
 * @typedef {Object} DataSetComparisonResultItem
 * @prop {number} hz
 * @prop {number} rme
 * @prop {number} rhz
 * @prop {boolean} fastest
 * @prop {boolean} succeeded
 */

function getKeyMapUnion(arrObjects) {
	var mapKeyToDataSets = {};
	arrObjects.forEach(function(el) {
		Object.keys(el).forEach(function(key) {
			if (!mapKeyToDataSets[key]) {
				mapKeyToDataSets[key] = [];
			}
			mapKeyToDataSets[key].push(el[key]);
		});
	});
	return mapKeyToDataSets;
}

/**
 *
 * @param {GroupedJSONBenchmarkObject} dataSetGroup
 * @returns {DataSetComparisonResult}
 */
function createDataSetComparisonResult(dataSetGroup) {

	var browser = dataSetGroup.browser;
	var os = dataSetGroup.os;
	var dataSets;
	var dataSetFastest;
	var resultMap = {};

	dataSets = dataSetGroup.dataSets
		.slice()
		.sort(sortFastest);
	dataSetFastest = dataSets[0];

	dataSets.forEach(function(el) {
		resultMap[getLibName(el)] = {
			hz: el.hz,
			rme: el.stats.rme / 100,
			fastest: Benchmark.prototype.compare.call(dataSetFastest, el) === 0,
			succeeded: isValid(el),
			rhz: el.hz / dataSetFastest.hz
		};
	});

	return {
		browser: browser,
		os: os,
		resultMap: resultMap
	};
}

/**
 *
 * @param {JSONBenchmarkObject[]} jsonBenchObjects
 * @returns {GroupedJSONBenchmarkObject[]}
 */
function groupDataSetsByBrowserAndOS(jsonBenchObjects) {
	var browserMap = getKeyMapUnion(jsonBenchObjects);
	var browser;
	var osMap;
	var os;
	var result = [];
	for (browser in browserMap) {
		if (browser !== '_metaData' && browserMap[browser].length > 1) {
			// something to compare
			osMap = getKeyMapUnion(browserMap[browser]);
			for (os in osMap) {
				if (osMap[os].length > 1) {
					result.push({ browser: browser, os: os, dataSets: osMap[os] });
				}
			}
		}
	}
	return result;
}

/**
 * Converts the selected file contents generated by BenchmarkStatsProcessor to a DataSetComparisonResult array.
 * @param {JSONBenchmarkObject[]} arrFileContent
 * @returns {DataSetComparisonResult[]}
 */
module.exports = function(arrFileContent) {
	return groupDataSetsByBrowserAndOS(arrFileContent)
		.map(createDataSetComparisonResult);
};